#!/usr/bin/env ansible-playbook
---
- name: Installing Business Central
  hosts: localhost
  connection: local
  vars:
     openshift_domain: example.com
     openshift_domain_cloudapps: cloudapps.{{ openshift_domain }} 
     username: demo
     password: r3dh4t1!
     businesscentral_namespace: business-central
     businesscentral_docker_image: openshift/business-central:latest
     jboss_installers:
         - { name: "JBoss EAP 6.0 Installer", filename: "jboss-eap-6.4.0-installer.jar", url: "https://access.redhat.com/jbossnetwork/restricted/softwareDownload.html?softwareId=37383" }
         - { name: "JBoss EAP 6.4 Patch 7", filename: "jboss-eap-6.4.7-patch.zip", url: "https://access.redhat.com/jbossnetwork/restricted/softwareDownload.html?softwareId=43071" }
         - { name: "JBoss BRMS 6.3.0 GA Installer", filename: "jboss-brms-6.3.0.GA-installer.jar", url: "https://access.redhat.com/jbossnetwork/restricted/softwareDownload.html?softwareId=43631" }
     tooling_namespace: tooling
  tasks:
#### Checking if the Installers are correct positioned
     - name: JBoss Installers are needed for this playbook   
       debug: msg="Be sure the {{ item.name }} file{{ ':' }} templates/rhcs-bc/installs/{{ item.filename }} exists ? Available at {{ item.url }}"
       with_items: "{{ jboss_installers }}"
       tags:  
          - check
     
     - name: Checking if JBoss Installers are avaible at templates/rhcs-bc/installs
       stat: path=templates/rhcs-bc/installs/{{ item.filename }}
       with_items: "{{ jboss_installers }}"
       register: jboss_installer_file
       failed_when: jboss_installer_file.stat.exists == False
       tags:  
          - check

     - name: Modifying all the installers so they have Running permissions
       file: path=templates/rhcs-bc/installs/{{ item.filename }} mode="u+x"
       with_items: "{{ jboss_installers }}"
       tags: 
          - check

     - name: Fetch Gogs's Port Address
       command: oc get service/gogs --output jsonpath='{..spec.ports[?(@.name=="web")].port}' --namespace {{ tooling_namespace }}
       register: gogs_port
       failed_when: gogs_port.rc != 0
       tags:
          - create
          - gogs

     - name: Define Gogs's
       set_fact: gogs_url="gogs.{{ tooling_namespace }}.svc.cluster.local{{ ':' }}{{ gogs_port.stdout }}"
       tags:
          - create
          - gogs

     - name: Wait for Gogs to be ready{{ ":" }} {{ gogs_url }}
       uri: url="http://{{ gogs_url }}" status_code=200 
       register: gogs_wait
       until: gogs_wait.status == 200
       retries: 60
       delay: 10
       tags: 
         - create
         - gogs

#### Creating the Project/Namespace 
     - name: Delete any previously projects already created
       command: oc delete project {{ businesscentral_namespace }} 
       ignore_errors: True
       tags: 
          - project_creation

     - name: Create a new project name {{ businesscentral_namespace }} for a user {{ username }}
       command: oadm new-project {{ businesscentral_namespace }} --display-name="Business Central{{ ':' }} LATAM Red Hat Forum 2016" --admin={{ username }}
       register: project_creation
       until: project_creation.rc == 0
       retries: 5
       delay: 15
       tags:
          - project_creation

     - name: Adjust the Policies so Business Central doesn't have problems running on top of OpenShift
       command: oadm policy add-scc-to-user anyuid --namespace {{ businesscentral_namespace }} --serviceaccount=default
       tags:
          - project_creation

     - name: Create a ImageStream based on JBoss Demo Central{{ ':' }} jbossdemocentral/developer
       command: oc new-build "jbossdemocentral/developer" --name=business-central --binary=true --namespace {{ businesscentral_namespace }}
       tags: 
          - project_creation

     - name: Added some variables used for Docker Build 
       command: oc env buildconfig/business-central GOGS_URL="{{ gogs_url }}" GOGS_USERNAME="{{ username }}" GOGS_PASSWORD="{{ password }}" --namespace {{ businesscentral_namespace }}
       tags:
          - project_creation

     - name: Import the newly Docker Image created to a ImageStream in the current Project
       command: oc import-image --confirm=true --insecure=true developer --namespace {{ businesscentral_namespace }}
       register: image_import
       until: image_import.rc == 0
       retries: 5
       delay: 15
       tags:
          - project_creation

     - name: Start building based on a content at "templates/rhcs-bc/"
       command: oc start-build business-central --from-dir=templates/rhcs-bc/ --follow=true --wait=true --namespace {{ businesscentral_namespace }}
       tags:
          - project_creation

     - name: Create a new application based on this ImageStream{{ ':' }} business-central
       command: oc new-app business-central --namespace {{ businesscentral_namespace }}
       tags:
          - project_creation

     - name: Expose the route as business-central.{{ openshift_domain_cloudapps }} 
       command: oc expose service business-central --hostname=business-central.{{ openshift_domain_cloudapps }} --namespace {{ businesscentral_namespace }}
       tags:
          - project_creation

     - name: Fetch Business Central Port Number
       command: oc get service/business-central --output jsonpath='{..spec.ports[?(@.name=="8080-tcp")].port}' --namespace {{ businesscentral_namespace }}
       register: business_central_port
       tags: config

     - name: Define Business Central's URL
       set_fact: business_central_address="http{{ ':' }}//business-central.{{ businesscentral_namespace }}.svc.cluster.local{{ ':' }}{{ business_central_port.stdout }}"
       tags: config

     - name: Waiting Business Central to be Up{{ ':' }} {{ business_central_address }}
       uri: url="{{ business_central_address }}" status_code=200
       register: business_central_wait
       until: business_central_wait.status == 200
       retries: 60
       delay: 10
       tags: config

     - name: Waiting Business Central Application to be Up{{ ':' }} {{ business_central_address }}/business-central
       uri: url="{{ business_central_address }}/business-central" status_code=200
       register: business_central_wait
       until: business_central_wait.status == 200
       retries: 60
       delay: 10
       tags: config

     - name: Wait Business Central to settle down a while
       pause: seconds=60
       tags: config
      
     - name: Setting Up Organization Unit at Business Central Name{{ ':' }} TechOffice. HardCoded username{{ ':' }} demo, password{{ ':' }}jbossbrms1!
       uri: method=POST body_format=json url={{ business_central_address }}/business-central/rest/organizationalunits/
            user='demo' password='jbossbrms1!' force_basic_auth=yes return_content=yes 
            body="{\"name\"{{ ':' }}\"techoffice\",\"owner\"{{ ':' }}\"demo\",\"description\"{{ ':' }}null,\"repositories\"{{ ':' }}[]}"
       register: business_central_response
       failed_when: business_central_response.status != 202
       tags: config

     - name: Setting Up Repositories at Business Central Name{{ ':' }} TechOffice. HardCoded username{{ ':' }} demo, password{{ ':' }}jbossbrms1!
       uri: method=POST body_format=json url={{ business_central_address }}/business-central/rest/repositories/
            user='demo' password='jbossbrms1!' force_basic_auth=yes return_content=yes                  
            body="{\"name\"{{ ':' }}\"brms\",\"description\"{{ ':' }}null,\"requestType\"{{ ':' }}\"new\",\"gitURL\"{{ ':' }}null,\"organizationalUnitName\"{{ ':' }}\"techoffice\"}"
       register: business_central_response
       failed_when: business_central_response.status != 202
       tags: config
